{"ast":null,"code":"import _toConsumableArray from \"/Users/brenda/Documents/l14-sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/brenda/Documents/l14-sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/brenda/Documents/l14-sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/brenda/Documents/l14-sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/brenda/Documents/l14-sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/brenda/Documents/l14-sticky-notes-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/brenda/Documents/l14-sticky-notes-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport NotesList from \"./NotesList\";\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      notes: [{\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }],\n      searchText: \"\"\n    };\n\n    _this.addNote = function () {\n      var newNote = {\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }; //update state to include the new note into the array\n\n      var newNotes = [newNote].concat(_toConsumableArray(_this.state.notes));\n\n      _this.setState({\n        notes: newNotes\n      }); // ALT:\n      // this.setState({ notes: [newNote, ...this.state.notes] });\n\n    };\n\n    _this.onType = function (idOfEdited, keyOfEdited, valueOfEdited) {\n      var editedNotes = _this.state.notes.map(function (note) {\n        if (note.id !== idOfEdited) {\n          return note;\n        } else {\n          if (keyOfEdited === \"title\") {\n            note.title = valueOfEdited;\n            return note;\n          } else {\n            note.description = valueOfEdited;\n            return note;\n          }\n        }\n      });\n\n      _this.setState({\n        notes: editedNotes\n      });\n    };\n\n    _this.onSearch = function (text) {\n      var newSearchText = text.toLowerCase(); //convert all text typed into search to lower case\n      //map over all notes; check for searchText - if none, set doesMatchSearch to true and return;\n\n      var updatedNotes = _this.state.notes.map(function (note) {\n        if (!newSearchText) {\n          note.doesMatchSearch = true;\n          return note; //handles case where someone types, then deletes; makes sure all notes are showing\n        } else {\n          var title = note.title.toLowerCase();\n          var description = note.description.toLowerCase();\n          var titleMatch = title.includes(newSearchText); //this will evaluate to true/false\n\n          var descriptionMatch = description.includes(newSearchText); //same as above\n\n          if (titleMatch) {\n            note.doesMatchSearch = true;\n          } else if (descriptionMatch) {\n            note.doesMatchSearch = true;\n          } else {\n            note.doesMatchSearch = false;\n          }\n\n          return note;\n        }\n      });\n\n      _this.setState({\n        notes: updatedNotes,\n        searchText: newSearchText\n      });\n    };\n\n    _this.removeNote = function (clickedId) {\n      // const revisedNotes = this.state.notes.filter(\n      //   (note) => note.id !== clickedId\n      // );\n      //ABOVE IS ALTERNATE METHOD\n      var revisedNotes = _this.state.notes.filter(function (note) {\n        if (note.id !== clickedId) {\n          return note;\n        }\n      });\n\n      _this.setState({\n        notes: revisedNotes\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    //Upon opening, check for any saved notes and open them\n    value: function componentDidMount() {\n      var savedNotes = localStorage.getItem(\"savedNotes\");\n\n      if (savedNotes) {\n        var savedState = JSON.parse(savedNotes);\n        this.setState(savedState);\n      }\n    } //Upon updating, save notes to local storage\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var savedNotes = JSON.stringify(this.state);\n      localStorage.setItem(\"savedNotes\", savedNotes);\n    } // Create method to add a note to the array\n    //set up content for new note\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        searchText: this.state.searchText,\n        addNote: this.addNote,\n        onSearch: this.onSearch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(NotesList, {\n        notes: this.state.notes,\n        onType: this.onType,\n        removeNote: this.removeNote,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/brenda/Documents/l14-sticky-notes-app/src/App.js"],"names":["React","Component","Header","NotesList","App","state","notes","id","Date","now","title","description","doesMatchSearch","searchText","addNote","newNote","newNotes","setState","onType","idOfEdited","keyOfEdited","valueOfEdited","editedNotes","map","note","onSearch","text","newSearchText","toLowerCase","updatedNotes","titleMatch","includes","descriptionMatch","removeNote","clickedId","revisedNotes","filter","savedNotes","localStorage","getItem","savedState","JSON","parse","stringify","setItem"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport NotesList from \"./NotesList\";\n\nclass App extends Component {\n  state = {\n    notes: [\n      {\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }\n    ],\n    searchText: \"\"\n  };\n\n  //Upon opening, check for any saved notes and open them\n  componentDidMount() {\n    const savedNotes = localStorage.getItem(\"savedNotes\");\n    if (savedNotes) {\n      const savedState = JSON.parse(savedNotes);\n      this.setState(savedState);\n    }\n  }\n\n  //Upon updating, save notes to local storage\n  componentDidUpdate() {\n    const savedNotes = JSON.stringify(this.state);\n    localStorage.setItem(\"savedNotes\", savedNotes);\n  }\n\n  // Create method to add a note to the array\n  //set up content for new note\n  addNote = () => {\n    const newNote = {\n      id: Date.now(),\n      title: \"\",\n      description: \"\",\n      doesMatchSearch: true\n    };\n    //update state to include the new note into the array\n    const newNotes = [newNote, ...this.state.notes];\n    this.setState({ notes: newNotes });\n    // ALT:\n    // this.setState({ notes: [newNote, ...this.state.notes] });\n  };\n\n  //method to edit a note after it's been created\n  //copy notes array and update content of note that was edited\n  //need to match id of note being edited to one in array\n  //need to identify whether title or description was edited\n  onType = (idOfEdited, keyOfEdited, valueOfEdited) => {\n    const editedNotes = this.state.notes.map((note) => {\n      if (note.id !== idOfEdited) {\n        return note;\n      } else {\n        if (keyOfEdited === \"title\") {\n          note.title = valueOfEdited;\n          return note;\n        } else {\n          note.description = valueOfEdited;\n          return note;\n        }\n      }\n    });\n    this.setState({ notes: editedNotes });\n  };\n\n  //method to search for a note\n  //check for match of title or description text\n  //if a match is found, update doesMatchSearch property to true\n  //add onChange e.listener to Headers text input\n  //props pass reference to onSearch method from App to onChange in Header\n\n  onSearch = (text) => {\n    const newSearchText = text.toLowerCase(); //convert all text typed into search to lower case\n    //map over all notes; check for searchText - if none, set doesMatchSearch to true and return;\n    const updatedNotes = this.state.notes.map((note) => {\n      if (!newSearchText) {\n        note.doesMatchSearch = true;\n        return note; //handles case where someone types, then deletes; makes sure all notes are showing\n      } else {\n        const title = note.title.toLowerCase();\n        const description = note.description.toLowerCase();\n        const titleMatch = title.includes(newSearchText); //this will evaluate to true/false\n        const descriptionMatch = description.includes(newSearchText); //same as above\n        if (titleMatch) {\n          note.doesMatchSearch = true;\n        } else if (descriptionMatch) {\n          note.doesMatchSearch = true;\n        } else {\n          note.doesMatchSearch = false;\n        }\n        return note;\n      }\n    });\n    this.setState({ notes: updatedNotes, searchText: newSearchText });\n  };\n\n  // removeNote = (clickedId) => {\n  //   /*filterCallback is using an index and removing the note at that index - returns all notes not at that index;\n  //   \"_\" underscore is serving as a placeholder;\n  //   filters through notes in array and returns a new array without those that have been clicked */\n  //   const filterCallback = (_, this.note.id) => this.note.id !== clickedId;\n  //   const revisedNotes = this.state.notes.filter(filterCallback);\n  //   this.setState({ notes: revisedNotes });\n  // };\n\n  removeNote = (clickedId) => {\n    // const revisedNotes = this.state.notes.filter(\n    //   (note) => note.id !== clickedId\n    // );\n    //ABOVE IS ALTERNATE METHOD\n    const revisedNotes = this.state.notes.filter((note) => {\n      if (note.id !== clickedId) {\n        return note;\n      }\n    });\n    this.setState({ notes: revisedNotes });\n  };\n\n  render() {\n    return (\n      <div className=\"body\">\n        <Header\n          searchText={this.state.searchText}\n          addNote={this.addNote}\n          onSearch={this.onSearch}\n        />\n        <NotesList\n          notes={this.state.notes}\n          onType={this.onType}\n          removeNote={this.removeNote}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}