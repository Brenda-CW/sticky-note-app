{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/brenda/Documents/l14-sticky-notes-app/src/NotesList.js\";\n\nimport React from \"react\";\nimport Note from \"./Note\";\n\nvar NotesList = function NotesList(props) {\n  //console.log(props); //Do this to see what props are being pulled in from App\n  //Callback Function\n  var searchFilter = function searchFilter(note) {\n    return note.doesMatchSearch === true;\n  }; //accepts a note and only returns if it's doesMatchSearch property = true\n  //shortented; const ssearchFilter = (note) => note.doesMatchSearch\n  //evaluates to true or false; if true, will add note to array, if false, will not\n  //Filter method - filter over array and apply condition set in Callback function\n\n\n  var searchMatches = props.notes.filter(searchFilter);\n\n  var writeNote = function writeNote(note) {\n    return /*#__PURE__*/React.createElement(Note, {\n      note: note,\n      key: note.id,\n      onType: props.onType,\n      removeNote: props.removeNote,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 5\n      }\n    });\n  };\n\n  var NoteElements = searchMatches.map(writeNote); // map over just the notes that match the search\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"notes-list\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }\n  }, NoteElements);\n};\n\nexport default NotesList;","map":{"version":3,"sources":["/Users/brenda/Documents/l14-sticky-notes-app/src/NotesList.js"],"names":["React","Note","NotesList","props","searchFilter","note","doesMatchSearch","searchMatches","notes","filter","writeNote","id","onType","removeNote","NoteElements","map"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAC3B;AAEA;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,eAAL,KAAyB,IAAnC;AAAA,GAArB,CAJ2B,CAK3B;AACA;AACA;AAEA;;;AACA,MAAMC,aAAa,GAAGJ,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBL,YAAnB,CAAtB;;AAEA,MAAMM,SAAS,GAAG,SAAZA,SAAY,CAACL,IAAD;AAAA,wBAChB,oBAAC,IAAD;AACE,MAAA,IAAI,EAAEA,IADR;AAEE,MAAA,GAAG,EAAEA,IAAI,CAACM,EAFZ;AAGE,MAAA,MAAM,EAAER,KAAK,CAACS,MAHhB;AAIE,MAAA,UAAU,EAAET,KAAK,CAACU,UAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADgB;AAAA,GAAlB;;AAQA,MAAMC,YAAY,GAAGP,aAAa,CAACQ,GAAd,CAAkBL,SAAlB,CAArB,CApB2B,CAoBwB;;AACnD,sBAAO;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BI,YAA5B,CAAP;AACD,CAtBD;;AAwBA,eAAeZ,SAAf","sourcesContent":["import React from \"react\";\nimport Note from \"./Note\";\n\nconst NotesList = (props) => {\n  //console.log(props); //Do this to see what props are being pulled in from App\n\n  //Callback Function\n  const searchFilter = (note) => note.doesMatchSearch === true;\n  //accepts a note and only returns if it's doesMatchSearch property = true\n  //shortented; const ssearchFilter = (note) => note.doesMatchSearch\n  //evaluates to true or false; if true, will add note to array, if false, will not\n\n  //Filter method - filter over array and apply condition set in Callback function\n  const searchMatches = props.notes.filter(searchFilter);\n\n  const writeNote = (note) => (\n    <Note\n      note={note}\n      key={note.id}\n      onType={props.onType}\n      removeNote={props.removeNote}\n    />\n  );\n  const NoteElements = searchMatches.map(writeNote); // map over just the notes that match the search\n  return <ul className=\"notes-list\">{NoteElements}</ul>;\n};\n\nexport default NotesList;\n"]},"metadata":{},"sourceType":"module"}